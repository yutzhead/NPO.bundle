API_URL = 'http://ida.omroep.nl/aapi/?stream=%s&token=%s'
TOKEN_URL = 'http://ida.omroep.nl/npoplayer/i.js'
RE_TOKEN = Regex('\.token = "([^"]+)";')
STREAM_BASE = 'http://livestreams.omroep.nl/live/npo/%s'

CHANNELS = {
	'npo-1': {
		'name': 'NPO 1',
		'url': 'tvlive/ned1/ned1.isml/ned1.m3u8'
	},
	'npo-2': {
		'name': 'NPO 2',
		'url': 'tvlive/ned2/ned2.isml/ned2.m3u8'
	},
	'npo-3': {
		'name': 'NPO Zapp',
		'url': 'tvlive/ned3/ned3.isml/ned3.m3u8'
	},
	'npo-nieuws': {
		'name': 'NPO Nieuws',
		'url': 'thematv/journaal24/journaal24.isml/journaal24.m3u8'
	},
	'npo-cultura': {
		'name': 'NPO Cultura',
		'url': 'thematv/cultura24/cultura24.isml/cultura24.m3u8'
	},
	'npo-101': {
		'name': 'NPO 101',
		'url': 'thematv/101tv/101tv.isml/101tv.m3u8'
	},
	'npo-politiek': {
		'name': 'NPO Politiek',
		'url': 'thematv/politiek24/politiek24.isml/politiek24.m3u8'
	},
	'npo-best': {
		'name': 'NPO Best',
		'url': 'thematv/best24/best24.isml/best24.m3u8'
	},
	'npo-doc': {
		'name': 'NPO Doc',
		'url': 'thematv/hollanddoc24/hollanddoc24.isml/hollanddoc24.m3u8'
	},
	'npo-zappxtra': {
		'name': 'NPO Zapp Xtra',
		'url': 'thematv/zappelin24/zappelin24.isml/zappelin24.m3u8'
	},
	'npo-humor-tv': {
		'name': 'NPO Humor TV',
		'url': 'thematv/humor24/humor24.isml/humor24.m3u8'
	}
}

####################################################################################################
def MetadataObjectForURL(url):

	slug = url.split('/')[-1]

	if slug not in CHANNELS:
		raise Ex.MediaNotAvailable

	html = HTML.ElementFromURL(url)

	title = html.xpath('//h1[contains(text(), "Nu ")]/span//text()')[0].strip()
	
	channel = html.xpath('//title//text()')[0].split(' -')[0].strip()
	
	try: summary = html.xpath('//span[@class="omission-overflow hide"]//text()')[0].strip()
	except:
		try: summary=html.xpath('//p[@class="overflow-description"]//text()')[0].strip()
		except: summary = ""
		 
	try: 
		duration = html.xpath('//div[span/@class="npo-glyph clock"]/p//text()')[0].split(':')
		duration = (int(duration[0])*60000) + (int(duration[1])*1000)
	except: duration = 0
	
	try: 
		genres = html.xpath('//div[span/@class="npo-glyph box"]/p//text()')[0].replace(', ', ' en ').split(' en ')
	except: genres = []
	
	try: studio = html.xpath('//div[span/@class="npo-glyph broadcast"]/p//text()')[0]
	except: studio = ''

	thumb = html.xpath('//div[@class="channel-logo"]/@style')[0].split("background-image: url('")[-1].split("')")[0].split('//')[-1].replace('regular_', '')
	thumb = 'http://%s' % (thumb)

	art = html.xpath('//div[@class="showcase-background"]/@style')[0].split("background-image: url('")[-1].split("')")[0].split('//')[-1]
	art = 'http://%s' % (art)

	return EpisodeObject(
		title = title,
		summary = summary,
		duration = duration,
		#genres = genres,
		directors = [studio],
		source_title = channel,
		thumb = Resource.ContentsOfURLWithFallback(thumb),
		art = art
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(
					key = HTTPLiveStreamURL(Callback(PlayVideo, url=url))
				)
			],
			video_resolution = '480',
			audio_channels = 2,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):

	slug = url.split('/')[-1]

	if slug not in CHANNELS:
		raise Ex.MediaNotAvailable

	stream_url = STREAM_BASE % CHANNELS[slug]['url']

	token_data = HTTP.Request(TOKEN_URL, cacheTime=0).content
	token = RE_TOKEN.search(token_data).group(1)

	json_obj = JSON.ObjectFromURL(API_URL % (stream_url, token), cacheTime=0)

	if json_obj['success'] == True:
		stream = json_obj['stream']

		try:
			req = HTTP.Request(stream, cacheTime=0, follow_redirects=False).content
		except Ex.RedirectError, e:
			if 'Location' in e.headers:
				stream = e.headers['Location']

		return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(stream))
	else:
		raise Ex.MediaNotAvailable
